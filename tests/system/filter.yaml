# Filter stage of pipeline test

---

- hosts: filter
  gather_facts: true
  serial: 1
  vars_files:
    - ../../deploy/settings.yaml
  vars:
    mysql_db_name: filter_test
    mysql_db_user: ztf
    settings: "{{ lookup('hashi_vault', 'secret='+vault.path+'/settings url='+vault.url)}}"
    mysql_root_password: "{{ settings.local_db_root_password }}"
    mysql_db_password: 123password
  tasks:
    - name: Ensure local db exists
      community.mysql.mysql_query:
        query:
          - CREATE DATABASE IF NOT EXISTS {{ mysql_db_name }};
          - USE {{ mysql_db_name }};
          - CREATE USER IF NOT EXISTS '{{ mysql_db_user }}'@'localhost' IDENTIFIED BY '{{ mysql_db_password }}';
          - GRANT ALL PRIVILEGES ON {{ mysql_db_name }}.* TO '{{ mysql_db_user }}'@'localhost';
          - GRANT FILE ON *.* TO '{{ mysql_db_user }}'@'localhost';
         #- DROP FUNCTION IF EXISTS jdnow;
          - CREATE FUNCTION IF NOT EXISTS tainow () RETURNS DOUBLE DETERMINISTIC RETURN (unix_timestamp(now())/86400 + 40587.0);
          - GRANT EXECUTE ON FUNCTION {{ mysql_db_name }}.tainow TO '{{ mysql_db_user }}'@'localhost';
        login_host: 127.0.0.1
        login_user: root
        login_password: "{{ mysql_root_password }}"
        single_transaction: yes
    - name: Create object table
      shell:
        cmd: "mysql --user='{{ mysql_db_user }}' --password='{{ mysql_db_password }}' '{{ mysql_db_name }}' < objects.sql"
        chdir: "{{ ansible_env.HOME }}/{{ git_name }}/common/schema/lasair_sql"
    - name: Create sherlock_classifications table
      shell:
        cmd: "mysql --user='{{ mysql_db_user }}' --password='{{ mysql_db_password }}' '{{ mysql_db_name }}' < sherlock_classifications.sql"
        chdir: "{{ ansible_env.HOME }}/{{ git_name }}/common/schema/lasair_sql"
    - name: Create area_hits table
      shell:
        cmd: "mysql --user='{{ mysql_db_user }}' --password='{{ mysql_db_password }}' '{{ mysql_db_name }}' < area_hits.sql"
        chdir: "{{ ansible_env.HOME }}/{{ git_name }}/common/schema/lasair_sql"
    - name: Create watchlist_hits table
      shell:
        cmd: "mysql --user='{{ mysql_db_user }}' --password='{{ mysql_db_password }}' '{{ mysql_db_name }}' < watchlist_hits.sql"
        chdir: "{{ ansible_env.HOME }}/{{ git_name }}/common/schema/lasair_sql"
    - name: Create annotations table
      shell:
        cmd: "mysql --user='{{ mysql_db_user }}' --password='{{ mysql_db_password }}' '{{ mysql_db_name }}' < annotations.sql"
        chdir: "{{ ansible_env.HOME }}/{{ git_name }}/common/schema/lasair_sql"
    - name: Run filter
      ansible.builtin.shell:
        chdir: lasair-lsst/pipeline/filter
        cmd: "python3 filtercore.py --maxalert=1 --maxbatch=1 --group_id=filter_test_1 --topic_in=filter_test --local_db={{ mysql_db_name }} --send_email=False --send_kafka=False --transfer=False --stats=False"
      register: filter_result
    - name: Result
      ansible.builtin.debug:
        var: filter_result
