---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: check command
      any_errors_fatal: true
      ansible.builtin.fail:
        msg: command must be either start or stop
      when: (command is not defined) or
            (command != "start" and command != "stop")
  tags: always

#- hosts: all
#  gather_facts: true

# standalone database node
- hosts: db
  gather_facts: false
  become: true
  tasks:
    - name: Start MariaDB
      ansible.builtin.service:
        name: mariadb
        state: started
      when: command == "start"
    - name: Stop MariaDB
      ansible.builtin.service:
        name: mariadb
        state: stopped
      when: command == "stop"
  tags: db

# galera cluster
- hosts: cluster_control,frontend_db,backend_db
  gather_facts: false
  # TODO
  tags: db

# service node - cron jobs etc.
#- hosts: svc
#  gather_facts: false
#  # nothing to do?
#  tags: svc

# service node - prometheus & grafana
- hosts: svc
  gather_facts: false
  become: true
  tasks:
    - name: Start Prometheus
      ansible.builtin.service:
        name: prometheus
        state: started
      when: command == "start"
    - name: Start Grafana
      ansible.builtin.service:
        name: grafana-server
        state: started
      when: command == "start"
    - name: Stop Grafana
      ansible.builtin.service:
        name: grafana-server
        state: stopped
      when: command == "stop"
    - name: Stop Prometheus
      ansible.builtin.service:
        name: prometheus
        state: stopped
      when: command == "stop"
  tags: monitor

# kafkas node - zookeeper and kafka
- hosts: kafka
  gather_facts: false
  become: true
  tasks:
    - name: Start Zookeeper
      community.docker.docker_compose:
        project_name: zookeeper
        project_src: '.'
        files:
          - zookeeper-compose.yml
        services:
          - zookeep
        state: present
        stopped: false
      when: command == "start"
    - name: Start Kafka
      community.docker.docker_compose:
        project_src: '.'
        files:
          - kafka-compose.yml
        services:
          - kafka
        state: present
        stopped: false
      when: command == "start"
    - name: Stop Kafka
      community.docker.docker_compose:
        project_src: '.'
        files:
          - kafka-compose.yml
        services:
          - kafka
        state: present
        stopped: true
      when: command == "stop"
    - name: Stop Zookeeper
      community.docker.docker_compose:
        project_name: zookeeper
        project_src: '.'
        files:
          - zookeeper-compose.yml
        services:
          - zookeep
        state: present
        stopped: true
      when: command == "stop"
  tags: kafka

# kafkas node - mirrormaker
- hosts: kafka
  gather_facts: false
  become: true
  tasks:
    - name: Start Mirrormaker
      community.docker.docker_compose:
       project_name: mirrormaker
        project_src: '.'
        files:
          - mirror-compose.yml
        services:
          - mirror
        state: present
        stopped: false
      when: command == "start"
    - name: Stop Mirrormaker
       project_name: mirrormaker
      community.docker.docker_compose:
        project_src: '.'
        files:
          - mirror-compose.yml
        services:
          - mirror
        state: present
        stopped: true
      when: command == "stop"
  tags: mirror

- hosts: kafka_pub
  gather_facts: false
  become: true
  tasks:
    - name: Start Zookeeper
      community.docker.docker_compose:
        project_name: zookeeper
        project_src: '.'
        files:
          - zookeeper-compose.yml
        services:
          - zookeep
        state: present
        stopped: false
      when: command == "start"
    - name: Start Kafka
      community.docker.docker_compose:
        project_src: '.'
        files:
          - kafka-compose.yml
        services:
          - kafka
        state: present
        stopped: false
      when: command == "start"
    - name: Stop Kafka
      community.docker.docker_compose:
        project_src: '.'
        files:
          - kafka-compose.yml
        services:
          - kafka
        state: present
        stopped: true
      when: command == "stop"
    - name: Stop Zookeeper
      community.docker.docker_compose:
        project_name: zookeeper
        project_src: '.'
        files:
          - zookeeper-compose.yml
        services:
          - zookeep
        state: present
        stopped: true
      when: command == "stop"
  tags: kafka_pub

- hosts: ingest
  gather_facts: false
  become: true
    ansible.builtin.systemd:
      state: started
      name: lasair-ingest 
    when: command == "start"
    ansible.builtin.systemd:
      state: stopped
      name: lasair-ingest 
    when: command == "stop"
  tags: ingest
  
# sherlock node - kafka wrapper
- hosts: sherlock
  gather_facts: false
  become: true
  tasks:
    - name: Start Sherlock wrapper
      community.docker.docker_compose:
        project_name: sherlock_wrapper
        project_src: '.'
        files:
          - sherlock-wrapper-compose.yml
        services:
          - sherlock_wrapper
        state: present
        scale: 2
        stopped: false
      when: command == "start"
    - name: Stop Kafka
      community.docker.docker_compose:
        project_name: sherlock_wrapper
        project_src: '.'
        files:
          - sherlock-wrapper-compose.yml
        services:
          - sherlock_wrapper
        state: present
        scale: 2
        stopped: true
      when: command == "stop"
  vars_files:
    - settings.yaml
  tags: sherlock
  
# sherlock node - service
- hosts: sherlock
  gather_facts: false
  become: true
  tasks:
    - name: Start Sherlock service
      ansible.builtin.systemd:
        state: started
        enabled: true
        name: sherlocksvc
      when: command == "start"
    - name: Start nginx
      ansible.builtin.systemd:
        name: nginx.service
        state: started
      when: command == "start"
    - name: Stop nginx
      ansible.builtin.systemd:
        name: nginx.service
        state: stopped
      when: command == "stop"
    - name: Stop Sherlock service
      ansible.builtin.systemd:
        state: stopped
        enabled: true
        name: sherlocksvc
      when: command == "stop"
  tags: sherlocksvc

- hosts: filter
  gather_facts: false
  become: true
    ansible.builtin.systemd:
      state: started
      name: lasair-filter 
    when: command == "start"
    ansible.builtin.systemd:
      state: stopped
      name: lasair-filter 
    when: command == "stop"
  tags: filter

- hosts: web
  gather_facts: false
  tasks:
    - name: Restart web server
      command:
        cmd: "{{ ansible_env.HOME }}/restart_webserver.sh"
    when: command == "start"
  # No need to stop Apache
  tags: web

- hosts: proxy
  gather_facts: false
  become: true
  tasks:
    - name: Start nginx
      ansible.builtin.systemd:
        name: nginx.service
        state: started
      when: command == "start"
    - name: Stop nginx
      ansible.builtin.systemd:
        name: nginx.service
        state: stopped
      when: command == "stop"
  tags: proxy

- hosts: cassandranodes
  gather_facts: false
  # TODO 
  tags: cassandra

#- hosts: parallel_ssh
#  gather_facts: false
#  # nothing to do?
#  tags: parallel_ssh

